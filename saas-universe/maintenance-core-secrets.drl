package secrets

import com.stratio.tais.persistence.model.ServiceDeployment
import com.stratio.tais.persistence.model.ServiceDeploymentParameter
import com.stratio.tais.persistence.model.ServiceConfigurationParameter
import com.stratio.tais.persistence.model.service.ServiceConfiguration
import com.stratio.tais.persistence.model.ConceptState
import com.stratio.tais.persistence.model.GlobalParameter
import com.stratio.tais.persistence.model.ErrorConcept
import com.stratio.tais.persistence.model.secret.CertificateSecretRequest
import com.stratio.tais.persistence.model.secret.PasswordSecretRequest
import com.stratio.tais.service.util.UniverseUtils
import com.stratio.tais.service.util.DeploymentUtils
import com.stratio.tais.senses.service.RandomStringGenerator
import com.stratio.tais.senses.service.VaultSense
import com.stratio.tais.cns.Senses
import com.stratio.tais.senses.utils.VaultUtils
import com.stratio.tais.cns.exceptions.MesosSecretException
import com.stratio.tais.cns.exceptions.SecretCreationException

/**
 * Creates SecretRequests for a bdl-masters-core  service and for a general workflow identity
*/
rule "Deployment - Secrets bdl-masters-core"
salience 1000
when
    $deploymentService: ServiceDeployment(
        deploymentState == ServiceDeployment.STATE_CREATING_DEPLOYMENT,
        $serviceDeploymentGlobalId: uuid,
        serviceConfiguration != null,
        serviceConfiguration.serviceName != null,
        serviceConfiguration.serviceName == "bdl-masters-core",
        secretsCreated == false)
    $serviceConfiguration: ServiceConfiguration(
        $serviceConfigurationGlobalId: uuid,
        state  == ConceptState.LEARNED,
        uuid == $deploymentService.serviceConfigurationGlobalId)
    $serviceConfParameter: ServiceConfigurationParameter(
        parent == $serviceConfigurationGlobalId,
        internalName == UniverseUtils.PARAM_SERVICE_ID,
        $name: name)
    $serviceDeploymentParameter: ServiceDeploymentParameter(
        parent == $serviceDeploymentGlobalId,
        name == $name)
then
  VaultSense vault = Senses.access(VaultSense.class);
  String maintenanceCoreWithTenantName = VaultUtils.sanitizeSecretIdentity($serviceDeploymentParameter.getValue());
  String path_marathon = VaultUtils.sanitizeSecretIdentityWithPath($serviceDeploymentParameter.getValue());
  String mesosDns = path_marathon + ".marathon.mesos";
  String SANs = mesosDns;

  String certificatesPath = "userland/certificates/".concat(maintenanceCoreWithTenantName);
  CertificateSecretRequest cert = new CertificateSecretRequest(certificatesPath,maintenanceCoreWithTenantName, maintenanceCoreWithTenantName, SANs);
  cert.setParent($serviceDeploymentGlobalId);
  insert(cert);

  String passwordPath = "userland/passwords/" + maintenanceCoreWithTenantName;
  PasswordSecretRequest passOperationKey = new PasswordSecretRequest(passwordPath, "keystore", null, RandomStringGenerator.randomString(10));
  passOperationKey.setParent($serviceDeploymentGlobalId);
  insert(passOperationKey);

  $deploymentService.setSecretsCreated(true);
  update($deploymentService);
end
